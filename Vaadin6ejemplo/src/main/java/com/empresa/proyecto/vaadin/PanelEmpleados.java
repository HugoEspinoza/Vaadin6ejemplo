package com.empresa.proyecto.vaadin;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.validator.routines.EmailValidator;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.empresa.proyecto.bean.Empleado;
import com.empresa.proyecto.bean.EstadoCivil;
import com.empresa.proyecto.bean.Opcion;
import com.empresa.proyecto.service.EmpleadoService;
import com.empresa.proyecto.service.EstadoCivilService;
import com.empresa.proyecto.util.Constante;
import com.empresa.proyecto.util.ValidacionException;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.ui.AbstractTextField.TextChangeEventMode;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;


public class PanelEmpleados extends MyComponent implements ClickListener, TextChangeListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */


	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout pnlContenido;
	@AutoGenerated
	private VerticalLayout pnlEmpleados;
	@AutoGenerated
	private HorizontalLayout lytBotones;
	@AutoGenerated
	private Button btnEliminar;
	@AutoGenerated
	private Button btnActualizar;
	@AutoGenerated
	private Button btnCrear;
	@AutoGenerated
	private HorizontalLayout lytEmail;
	@AutoGenerated
	private TextField txtEmail;
	@AutoGenerated
	private Label lblEmail;
	@AutoGenerated
	private HorizontalLayout lytEstadoCivil;
	@AutoGenerated
	private ComboBox cmbEstadoCivil;
	@AutoGenerated
	private Label lblEstado;
	@AutoGenerated
	private HorizontalLayout lytApellido;
	@AutoGenerated
	private TextField txtApellido;
	@AutoGenerated
	private Label lblApellido;
	@AutoGenerated
	private HorizontalLayout lytNombre;
	@AutoGenerated
	private TextField txtNombre;
	@AutoGenerated
	private Label lblNombre;
	@AutoGenerated
	private HorizontalLayout lytID;
	@AutoGenerated
	private TextField txtID;
	@AutoGenerated
	private Label lblID;
	@AutoGenerated
	private VerticalLayout pnlBusqueda;
	@AutoGenerated
	private Table tblEmpleados;
	@AutoGenerated
	private HorizontalLayout pnlFiltros;
	@AutoGenerated
	private TextField txtFiltroEmail;
	@AutoGenerated
	private TextField txtFiltroEstadoCivil;
	@AutoGenerated
	private TextField txtFiltroApellido;
	@AutoGenerated
	private TextField txtFiltroNombre;
	@AutoGenerated
	private TextField txtFiltroID;
	private EmpleadoService empleadoService;
	private EstadoCivilService estadoCivilService;
	private EstadoCivil estadoCivil;
	
	private static final long serialVersionUID = -3245173139236846726L;
	private static final String MENSAJE_FALTA_ID = "<br/>Debe tener un ID de Empleado";
	private static final String MENSAJE_FALTA_NOMBRE = "<br/>Ingresar Nombre";
	private static final String MENSAJE_FALTA_APELLIDO = "<br/>Ingresar Apellido";
	private static final String MENSAJE_FALTA_EMAIL = "<br/>Ingresar Email";
	private static final String MENSAJE_NO_ES_EMAIL = "<br/>Ingresar Email con formato xx@xx.xx";
	private static final String MENSAJE_FALTA_ESTADO_CIVIL = "<br/>Seleccionar Estado Civil";
	
	
	public PanelEmpleados() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postConstruccion();
	}

	public PanelEmpleados(List<Opcion> listaOpciones, String height){
		super(listaOpciones, height);
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		postConstruccion();
		cargarDetalleTabla(null);
		colocarEstadosCiviles();
	}

	private void colocarEstadosCiviles() {

		List<EstadoCivil> listaEstadoCivil = estadoCivilService.listarEstadoCivil();
		BeanItemContainer<EstadoCivil> bicEstadoCivil = new BeanItemContainer<EstadoCivil>(EstadoCivil.class, listaEstadoCivil);
		bicEstadoCivil.addBean(estadoCivil);
		cmbEstadoCivil.setContainerDataSource(bicEstadoCivil);
		cmbEstadoCivil.setInputPrompt("Estado Civil");
		cmbEstadoCivil.setItemCaptionPropertyId("descripcion");
		cmbEstadoCivil.select(estadoCivil);
	}

	private void cargarDetalleTabla(List<Empleado> listaEmpleados) {
		
		if(listaEmpleados == null){
			listaEmpleados = empleadoService.listarEmpleados();
		}
		
		IndexedContainer container = new IndexedContainer();

		container.addContainerProperty("id.empleado", Integer.class,  null);
		container.addContainerProperty("nombre", String.class, null);
		container.addContainerProperty("apellido", String.class, null);	
		container.addContainerProperty("id.estado.civil", Integer.class,  null);
		container.addContainerProperty("estado.civil", String.class, null);	
		container.addContainerProperty("email", String.class, null);	
		
		int con=1;
		for (Empleado empleado : listaEmpleados){
			Item item = container.addItem(con++);
	        item.getItemProperty("id.empleado").setValue(empleado.getId());
	        item.getItemProperty("nombre").setValue(empleado.getNombre());
	        item.getItemProperty("apellido").setValue(empleado.getApellido());
	        item.getItemProperty("id.estado.civil").setValue(empleado.getEstadoCivil().getId());
	        item.getItemProperty("estado.civil").setValue(empleado.getEstadoCivil().getDescripcion());
	        item.getItemProperty("email").setValue(empleado.getEmail());
		}
		
		tblEmpleados.setContainerDataSource(container);
		tblEmpleados.setVisibleColumns(new Object[]{"id.empleado", "nombre", "apellido", "estado.civil", "email" });
		tblEmpleados.setColumnWidth("id.empleado", 15);
		tblEmpleados.setColumnWidth("nombre", 80);
		tblEmpleados.setColumnWidth("apellido", 80);
		tblEmpleados.setColumnWidth("estado.civil", 50);
		tblEmpleados.setColumnWidth("email", 120);
		
		tblEmpleados.setColumnHeader("id.empleado", "ID");		
		tblEmpleados.setColumnHeader("nombre", "Nombres");
		tblEmpleados.setColumnHeader("apellido", "Apellidos");
		tblEmpleados.setColumnHeader("estado.civil", "Est. Civil");
		tblEmpleados.setColumnHeader("email", "Email");
		
		tblEmpleados.addListener( new ValueChangeListener() {
			
			private static final long serialVersionUID = -5458312467728984453L;

			@Override
			public void valueChange( ValueChangeEvent event ) {
				
				boolean esModoNuevo = tblEmpleados.getValue() == null;
				
				if ( esModoNuevo ) {
					
					tblEmpleados.setValue( null );
					limpiarCombos();
					limpiarTextFields();
					habilitarAlCrear();
					habilitarCamposActualizacion();
				} else {
					cargarDetalleDeTablaHaciaPanel();
					habilitarAlActualizarYEliminar();
				}
			}

		} );
	}

	private void habilitarAlActualizarYEliminar(){
		
		btnCrear.setVisible(false);
		btnActualizar.setVisible(true);
		btnEliminar.setVisible(true);
	} 	
	
	private void cargarDetalleDeTablaHaciaPanel() {

		Item item = tblEmpleados.getItem(tblEmpleados.getValue());
		txtID.setValue(item.getItemProperty("id.empleado").getValue());
		txtNombre.setValue(item.getItemProperty("nombre").getValue());
		txtApellido.setValue(item.getItemProperty("apellido").getValue());
		txtEmail.setValue(item.getItemProperty("email").getValue());
		
		int idEstadoCivil = Integer.parseInt( item.getItemProperty("id.estado.civil").getValue().toString() );
		EstadoCivil estadoCivil = estadoCivilService.obtenerEstadoCivil(idEstadoCivil);
		cmbEstadoCivil.select(estadoCivil);
		
		habilitarAlActualizarYEliminar();
	}
	
	@Override
	public void postConstruccion() {
		
		mainLayout.setSizeFull();
		
		ApplicationContext context = getApplicationContext();
		empleadoService = (EmpleadoService) context.getBean("empleadoService");
		estadoCivilService = (EstadoCivilService) context.getBean("estadoCivilService");
		
		cmbEstadoCivil.setImmediate(true);
		txtID.setEnabled(false);
		tblEmpleados.setSelectable(true);
		tblEmpleados.setImmediate(true);
		
		btnCrear.addListener((ClickListener)this);
		btnActualizar.addListener((ClickListener)this);
		btnEliminar.addListener((ClickListener)this);
		
		
		txtFiltroID.setTextChangeEventMode(TextChangeEventMode.EAGER);
		txtFiltroNombre.setTextChangeEventMode(TextChangeEventMode.EAGER);
		txtFiltroApellido.setTextChangeEventMode(TextChangeEventMode.EAGER);
		txtFiltroEmail.setTextChangeEventMode(TextChangeEventMode.EAGER);
		txtFiltroEstadoCivil.setTextChangeEventMode(TextChangeEventMode.EAGER);
		
		txtFiltroID.addListener((TextChangeListener)this);
		txtFiltroNombre.addListener((TextChangeListener)this);
		txtFiltroApellido.addListener((TextChangeListener)this);
		txtFiltroEmail.addListener((TextChangeListener)this);
		txtFiltroEstadoCivil.addListener((TextChangeListener)this);
		
	}
	
	private static ApplicationContext getApplicationContext() {
		ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();
		HttpServletRequest request = requestAttributes.getRequest();
		HttpSession session = request.getSession(false);
		return WebApplicationContextUtils.getRequiredWebApplicationContext(session.getServletContext());
	}
	
	@Override
	public void buttonClick(ClickEvent event) {

		if(event.getButton().equals(btnCrear)){
			
			validarCamposFormulario();
			crearEmpleado();
		}
		
		if(event.getButton().equals(btnActualizar)){
			
			validarCamposFormulario(event);
			actualizarEmpleado();
			habilitarCamposActualizacion();
			habilitarAlCrear();
		}
		
		if(event.getButton().equals(btnEliminar)){
			
			eliminarEmpleado();
			habilitarCamposActualizacion();
			habilitarAlCrear();
		}
		
		cargarDetalleTabla(null);
		limpiarCombos();
		limpiarTextFields();
		colocarEstadosCiviles();
	}
	
	
	private void habilitarCamposActualizacion() {
		
		txtNombre.setEnabled(true);
		cmbEstadoCivil.setEnabled(true);
		txtEmail.setEnabled(true);		
	}	
	
	private void habilitarAlCrear(){
		
		btnCrear.setVisible(true);
		btnActualizar.setVisible(false);
		btnEliminar.setVisible(false);
	}
	
	
	private void limpiarTextFields() {

		txtID.setValue(StringUtils.EMPTY);
		txtNombre.setValue(StringUtils.EMPTY);
		txtApellido.setValue(StringUtils.EMPTY); 
		txtEmail.setValue(StringUtils.EMPTY);
	}

	private void limpiarCombos() {
		
		cmbEstadoCivil.select(null);
	}

	private void eliminarEmpleado() {

		empleadoService.eliminarEmpleado( Integer.parseInt(txtID.getValue().toString()));
	}

	private void actualizarEmpleado() {

		EstadoCivil estadoCivil = (EstadoCivil) cmbEstadoCivil.getValue();
		Empleado empleado = new Empleado();
		empleado.setId((Integer)txtID.getValue());
		empleado.setNombre((String)txtNombre.getValue());
		empleado.setApellido((String)txtApellido.getValue());
		empleado.setEstadoCivil(estadoCivil);
		empleado.setEmail((String)txtEmail.getValue());
		
		empleadoService.actualizarEmpleado(empleado);
	}

	private void crearEmpleado() {

		
		EstadoCivil estadoCivil = (EstadoCivil) cmbEstadoCivil.getValue();
		Empleado nuevoEmpleado = new Empleado();
		nuevoEmpleado.setNombre((String)txtNombre.getValue());
		nuevoEmpleado.setApellido((String)txtApellido.getValue());
		nuevoEmpleado.setEstadoCivil(estadoCivil);
		nuevoEmpleado.setEmail((String)txtEmail.getValue());
		
		empleadoService.crearEmpleado(nuevoEmpleado);
		
	}

	private void validarCamposFormulario(ClickEvent event){
		
		if(event.getButton().equals(btnActualizar)){
			if (txtID.getValue() == null || StringUtils.isBlank(txtID.getValue().toString()) ){
					
				throw new ValidacionException(Constante.CODIGO_MENSAJE.VALIDAR_MENSAJE_GENERICO, new Object[] { MENSAJE_FALTA_ID });
			}
		}
		validarCamposFormulario();
			
	} 
	
	/**
	 * */
	private void validarCamposFormulario() {

		
		if (StringUtils.isBlank( getString(txtNombre))){
			throw new ValidacionException(Constante.CODIGO_MENSAJE.VALIDAR_MENSAJE_GENERICO, new Object[] { MENSAJE_FALTA_NOMBRE });
		}
		
		if (StringUtils.isBlank( getString(txtApellido))){
			throw new ValidacionException(Constante.CODIGO_MENSAJE.VALIDAR_MENSAJE_GENERICO, new Object[]{ MENSAJE_FALTA_APELLIDO });
		}

		if (cmbEstadoCivil.getValue() == null ){
			throw new ValidacionException(Constante.CODIGO_MENSAJE.VALIDAR_MENSAJE_GENERICO, new Object[]{ MENSAJE_FALTA_ESTADO_CIVIL});
		}
		
		if (StringUtils.isBlank(getString(txtEmail))){
			throw new ValidacionException(Constante.CODIGO_MENSAJE.VALIDAR_MENSAJE_GENERICO, new Object[]{ MENSAJE_FALTA_EMAIL });
			
		}else{
			EmailValidator emailVal = EmailValidator.getInstance();
			if(!emailVal.isValid(getString(txtEmail))){
				throw new ValidacionException(Constante.CODIGO_MENSAJE.VALIDAR_MENSAJE_GENERICO, new Object[]{ MENSAJE_NO_ES_EMAIL });
			}
		}
		
	}
	
	
	public void setEstadoCivilService(EstadoCivilService estadoCivilService) {
		this.estadoCivilService = estadoCivilService;
	}
	
	public void setEmpleadoService(EmpleadoService empleadoService) {
		this.empleadoService = empleadoService;
	}


	@Override
	public void textChange(TextChangeEvent event) {

		Empleado empleado = null;
		if(event.getSource().equals(txtFiltroID)){
			
			empleado = new Empleado();
			EstadoCivil estadoCivil = new EstadoCivil();
			
			if(StringUtils.isNumeric(event.getText())){
				if(StringUtils.isNotBlank(event.getText())){
					empleado.setId(Integer.parseInt(event.getText()));
				}
				txtFiltroID.setValue(event.getText());
			}else{
				txtFiltroID.setValue(txtFiltroID.getValue());
			}	
			if(StringUtils.isNotBlank(txtFiltroNombre.getValue().toString())){
				empleado.setNombre(txtFiltroNombre.getValue().toString());
			}
			if(StringUtils.isNotBlank(txtFiltroApellido.getValue().toString())){
				empleado.setApellido(txtFiltroApellido.getValue().toString());
			}				
			if(StringUtils.isNotBlank(txtFiltroEstadoCivil.getValue().toString())){
				
				estadoCivil.setDescripcion(txtFiltroEstadoCivil.getValue().toString());
				empleado.setEstadoCivil(estadoCivil);
			}			
			if(StringUtils.isNotBlank(txtFiltroEmail.getValue().toString())){
				empleado.setEmail(txtFiltroEmail.getValue().toString());
			}		
		}
		
		if(event.getSource().equals(txtFiltroNombre)) {
			
			empleado = new Empleado();
			EstadoCivil estadoCivil = new EstadoCivil();
			
			if(StringUtils.isNotBlank(event.getText())){
				empleado.setNombre(event.getText());
			}	
			
			if(StringUtils.isNotBlank(txtFiltroID.getValue().toString())){
				empleado.setId(Integer.parseInt(txtFiltroID.getValue().toString()));
			}
			
			if(StringUtils.isNotBlank(txtFiltroApellido.getValue().toString())){
				empleado.setApellido(txtFiltroApellido.getValue().toString());
			}			
			
			if(StringUtils.isNotBlank(txtFiltroEstadoCivil.getValue().toString())){
				
				estadoCivil.setDescripcion(txtFiltroEstadoCivil.getValue().toString());
				empleado.setEstadoCivil(estadoCivil);
			}
			if(StringUtils.isNotBlank(txtFiltroEmail.getValue().toString())){
				empleado.setEmail(txtFiltroEmail.getValue().toString());
			}	
		}
		
		if(event.getSource().equals(txtFiltroApellido)) {
			
			empleado = new Empleado();
			EstadoCivil estadoCivil = new EstadoCivil();
			
			if(StringUtils.isNotBlank(event.getText())){
				empleado.setApellido(event.getText());
			}	
			
			if(StringUtils.isNotBlank(txtFiltroID.getValue().toString())){
				empleado.setId(Integer.parseInt(txtFiltroID.getValue().toString()));
			}
			
			if(StringUtils.isNotBlank(txtFiltroNombre.getValue().toString())){
				empleado.setNombre(txtFiltroNombre.getValue().toString());
			}			
			
			if(StringUtils.isNotBlank(txtFiltroEstadoCivil.getValue().toString())){
				
				estadoCivil.setDescripcion(txtFiltroEstadoCivil.getValue().toString());
				empleado.setEstadoCivil(estadoCivil);
			}
			if(StringUtils.isNotBlank(txtFiltroEmail.getValue().toString())){
				empleado.setEmail(txtFiltroEmail.getValue().toString());
			}	
		}
		
		if(event.getSource().equals(txtFiltroEstadoCivil)) {
			
			empleado = new Empleado();
			EstadoCivil estadoCivil = new EstadoCivil();
			
			if(StringUtils.isNotBlank(event.getText())){
				
				estadoCivil.setDescripcion(event.getText());
				empleado.setEstadoCivil(estadoCivil);
			}
			
			if(StringUtils.isNotBlank(txtFiltroID.getValue().toString())){
				empleado.setId(Integer.parseInt(txtFiltroID.getValue().toString()));
			}
			
			if(StringUtils.isNotBlank(txtFiltroNombre.getValue().toString())){
				empleado.setNombre(txtFiltroNombre.getValue().toString());
			}			

			if(StringUtils.isNotBlank(txtFiltroApellido.getValue().toString())){
				empleado.setApellido(txtFiltroApellido.getValue().toString());
			}
			
			if(StringUtils.isNotBlank(txtFiltroEmail.getValue().toString())){
				empleado.setEmail(txtFiltroEmail.getValue().toString());
			}	
		}	
		
		
		if(event.getSource().equals(txtFiltroEmail)) {
			
			empleado = new Empleado();
			EstadoCivil estadoCivil = new EstadoCivil();
			
			if(StringUtils.isNotBlank(event.getText())){
				empleado.setEmail(event.getText());
			}	
			
			if(StringUtils.isNotBlank(txtFiltroID.getValue().toString())){
				empleado.setId(Integer.parseInt(txtFiltroID.getValue().toString()));
			}
			
			if(StringUtils.isNotBlank(txtFiltroNombre.getValue().toString())){
				empleado.setNombre(txtFiltroNombre.getValue().toString());
			}			
			
			if(StringUtils.isNotBlank(txtFiltroEstadoCivil.getValue().toString())){
				
				estadoCivil.setDescripcion(txtFiltroEstadoCivil.getValue().toString());
				empleado.setEstadoCivil(estadoCivil);
			}
			if(StringUtils.isNotBlank(txtFiltroApellido.getValue().toString())){
				empleado.setApellido(txtFiltroApellido.getValue().toString());
			}	
		}
		
		List<Empleado> listaEmpleados = empleadoService.buscarEmpleadosPorFiltros(empleado);
		cargarDetalleTabla(listaEmpleados);
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// pnlContenido
		pnlContenido = buildPnlContenido();
		mainLayout.addComponent(pnlContenido);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlContenido() {
		// common part: create layout
		pnlContenido = new HorizontalLayout();
		pnlContenido.setImmediate(false);
		pnlContenido.setWidth("660px");
		pnlContenido.setHeight("300px");
		pnlContenido.setMargin(false);
		
		// pnlBusqueda
		pnlBusqueda = buildPnlBusqueda();
		pnlContenido.addComponent(pnlBusqueda);
		
		// pnlEmpleados
		pnlEmpleados = buildPnlEmpleados();
		pnlContenido.addComponent(pnlEmpleados);
		
		return pnlContenido;
	}

	@AutoGenerated
	private VerticalLayout buildPnlBusqueda() {
		// common part: create layout
		pnlBusqueda = new VerticalLayout();
		pnlBusqueda.setImmediate(false);
		pnlBusqueda.setWidth("420px");
		pnlBusqueda.setHeight("-1px");
		pnlBusqueda.setMargin(false);
		
		// pnlFiltros
		pnlFiltros = buildPnlFiltros();
		pnlBusqueda.addComponent(pnlFiltros);
		
		// tblEmpleados
		tblEmpleados = new Table();
		tblEmpleados.setImmediate(false);
		tblEmpleados.setWidth("410px");
		tblEmpleados.setHeight("256px");
		pnlBusqueda.addComponent(tblEmpleados);
		
		return pnlBusqueda;
	}

	@AutoGenerated
	private HorizontalLayout buildPnlFiltros() {
		// common part: create layout
		pnlFiltros = new HorizontalLayout();
		pnlFiltros.setImmediate(false);
		pnlFiltros.setWidth("-1px");
		pnlFiltros.setHeight("-1px");
		pnlFiltros.setMargin(false);
		
		// txtFiltroID
		txtFiltroID = new TextField();
		txtFiltroID.setImmediate(false);
		txtFiltroID.setWidth("30px");
		txtFiltroID.setHeight("-1px");
		txtFiltroID.setInputPrompt("ID");
		pnlFiltros.addComponent(txtFiltroID);
		
		// txtFiltroNombre
		txtFiltroNombre = new TextField();
		txtFiltroNombre.setImmediate(false);
		txtFiltroNombre.setWidth("90px");
		txtFiltroNombre.setHeight("-1px");
		txtFiltroNombre.setInputPrompt("Nombre");
		pnlFiltros.addComponent(txtFiltroNombre);
		
		// txtFiltroApellido
		txtFiltroApellido = new TextField();
		txtFiltroApellido.setImmediate(false);
		txtFiltroApellido.setWidth("90px");
		txtFiltroApellido.setHeight("-1px");
		txtFiltroApellido.setInputPrompt("Apellido");
		pnlFiltros.addComponent(txtFiltroApellido);
		
		// txtFiltroEstadoCivil
		txtFiltroEstadoCivil = new TextField();
		txtFiltroEstadoCivil.setImmediate(false);
		txtFiltroEstadoCivil.setWidth("70px");
		txtFiltroEstadoCivil.setHeight("-1px");
		txtFiltroEstadoCivil.setInputPrompt("Estado Civil");
		pnlFiltros.addComponent(txtFiltroEstadoCivil);
		
		// txtFiltroEmail
		txtFiltroEmail = new TextField();
		txtFiltroEmail.setImmediate(false);
		txtFiltroEmail.setWidth("130px");
		txtFiltroEmail.setHeight("-1px");
		txtFiltroEmail.setInputPrompt("Email");
		pnlFiltros.addComponent(txtFiltroEmail);
		
		return pnlFiltros;
	}

	@AutoGenerated
	private VerticalLayout buildPnlEmpleados() {
		// common part: create layout
		pnlEmpleados = new VerticalLayout();
		pnlEmpleados.setImmediate(false);
		pnlEmpleados.setWidth("260px");
		pnlEmpleados.setHeight("280px");
		pnlEmpleados.setMargin(false);
		
		// lytID
		lytID = buildLytID();
		pnlEmpleados.addComponent(lytID);
		
		// lytNombre
		lytNombre = buildLytNombre();
		pnlEmpleados.addComponent(lytNombre);
		
		// lytApellido
		lytApellido = buildLytApellido();
		pnlEmpleados.addComponent(lytApellido);
		
		// lytEstadoCivil
		lytEstadoCivil = buildLytEstadoCivil();
		pnlEmpleados.addComponent(lytEstadoCivil);
		
		// lytEmail
		lytEmail = buildLytEmail();
		pnlEmpleados.addComponent(lytEmail);
		
		// lytBotones
		lytBotones = buildLytBotones();
		pnlEmpleados.addComponent(lytBotones);
		
		return pnlEmpleados;
	}

	@AutoGenerated
	private HorizontalLayout buildLytID() {
		// common part: create layout
		lytID = new HorizontalLayout();
		lytID.setImmediate(false);
		lytID.setWidth("120px");
		lytID.setHeight("-1px");
		lytID.setMargin(false);
		
		// lblID
		lblID = new Label();
		lblID.setImmediate(false);
		lblID.setWidth("60px");
		lblID.setHeight("-1px");
		lblID.setValue("ID:");
		lytID.addComponent(lblID);
		
		// txtID
		txtID = new TextField();
		txtID.setImmediate(false);
		txtID.setWidth("60px");
		txtID.setHeight("-1px");
		lytID.addComponent(txtID);
		
		return lytID;
	}

	@AutoGenerated
	private HorizontalLayout buildLytNombre() {
		// common part: create layout
		lytNombre = new HorizontalLayout();
		lytNombre.setImmediate(false);
		lytNombre.setWidth("200px");
		lytNombre.setHeight("-1px");
		lytNombre.setMargin(false);
		
		// lblNombre
		lblNombre = new Label();
		lblNombre.setImmediate(false);
		lblNombre.setWidth("60px");
		lblNombre.setHeight("-1px");
		lblNombre.setValue("Nombre:");
		lytNombre.addComponent(lblNombre);
		
		// txtNombre
		txtNombre = new TextField();
		txtNombre.setImmediate(false);
		txtNombre.setWidth("140px");
		txtNombre.setHeight("-1px");
		lytNombre.addComponent(txtNombre);
		
		return lytNombre;
	}

	@AutoGenerated
	private HorizontalLayout buildLytApellido() {
		// common part: create layout
		lytApellido = new HorizontalLayout();
		lytApellido.setImmediate(false);
		lytApellido.setWidth("200px");
		lytApellido.setHeight("-1px");
		lytApellido.setMargin(false);
		
		// lblApellido
		lblApellido = new Label();
		lblApellido.setImmediate(false);
		lblApellido.setWidth("60px");
		lblApellido.setHeight("-1px");
		lblApellido.setValue("Apellidos:");
		lytApellido.addComponent(lblApellido);
		
		// txtApellido
		txtApellido = new TextField();
		txtApellido.setImmediate(false);
		txtApellido.setWidth("140px");
		txtApellido.setHeight("-1px");
		lytApellido.addComponent(txtApellido);
		
		return lytApellido;
	}

	@AutoGenerated
	private HorizontalLayout buildLytEstadoCivil() {
		// common part: create layout
		lytEstadoCivil = new HorizontalLayout();
		lytEstadoCivil.setImmediate(false);
		lytEstadoCivil.setWidth("-1px");
		lytEstadoCivil.setHeight("-1px");
		lytEstadoCivil.setMargin(false);
		
		// lblEstado
		lblEstado = new Label();
		lblEstado.setImmediate(false);
		lblEstado.setWidth("60px");
		lblEstado.setHeight("-1px");
		lblEstado.setValue("Est. Civil:");
		lytEstadoCivil.addComponent(lblEstado);
		
		// cmbEstadoCivil
		cmbEstadoCivil = new ComboBox();
		cmbEstadoCivil.setImmediate(false);
		cmbEstadoCivil.setWidth("140px");
		cmbEstadoCivil.setHeight("-1px");
		lytEstadoCivil.addComponent(cmbEstadoCivil);
		
		return lytEstadoCivil;
	}

	@AutoGenerated
	private HorizontalLayout buildLytEmail() {
		// common part: create layout
		lytEmail = new HorizontalLayout();
		lytEmail.setImmediate(false);
		lytEmail.setWidth("200px");
		lytEmail.setHeight("-1px");
		lytEmail.setMargin(false);
		
		// lblEmail
		lblEmail = new Label();
		lblEmail.setImmediate(false);
		lblEmail.setWidth("60px");
		lblEmail.setHeight("-1px");
		lblEmail.setValue("Email:");
		lytEmail.addComponent(lblEmail);
		
		// txtEmail
		txtEmail = new TextField();
		txtEmail.setImmediate(false);
		txtEmail.setWidth("140px");
		txtEmail.setHeight("-1px");
		lytEmail.addComponent(txtEmail);
		
		return lytEmail;
	}

	@AutoGenerated
	private HorizontalLayout buildLytBotones() {
		// common part: create layout
		lytBotones = new HorizontalLayout();
		lytBotones.setImmediate(false);
		lytBotones.setWidth("-1px");
		lytBotones.setHeight("-1px");
		lytBotones.setMargin(false);
		
		// btnCrear
		btnCrear = new Button();
		btnCrear.setCaption("Crear");
		btnCrear.setImmediate(true);
		btnCrear.setWidth("-1px");
		btnCrear.setHeight("-1px");
		lytBotones.addComponent(btnCrear);
		
		// btnActualizar
		btnActualizar = new Button();
		btnActualizar.setCaption("Actualizar");
		btnActualizar.setImmediate(true);
		btnActualizar.setWidth("-1px");
		btnActualizar.setHeight("-1px");
		lytBotones.addComponent(btnActualizar);
		
		// btnEliminar
		btnEliminar = new Button();
		btnEliminar.setCaption("Eliminar");
		btnEliminar.setImmediate(true);
		btnEliminar.setWidth("-1px");
		btnEliminar.setHeight("-1px");
		lytBotones.addComponent(btnEliminar);
		
		return lytBotones;
	}



}
